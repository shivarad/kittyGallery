{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/Searchbox/Searchbox.js","components/Scroll/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","CardList","renderCards","CATS","map","cat","key","username","Searchbox","type","placeholder","onChange","searchChange","Scroll","style","overflow","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","cats","fetch","then","response","json","users","filteredCats","filter","toLocaleLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gUAmBeA,G,WAZJ,SAACC,GACR,OACI,yBAAKC,UAAU,mFAEX,yBAAKC,IAAG,uCAAkCF,EAAMG,GAAxC,0BAAoEC,IAAI,UAChF,4BAAKJ,EAAMK,SCKRC,EAZA,SAAC,GAAU,IAEhBC,EAFe,EAARC,KAEUC,KAAI,SAAAC,GAAG,OAAG,kBAAC,EAAD,CAAMC,IAAKD,EAAIP,GAAIA,GAAIO,EAAIP,GAAIE,KAAMK,EAAIE,cAE1E,OACA,6BACKL,ICGMM,G,MATC,SAACb,GACb,OACI,6BACI,2BAAOc,KAAK,SAASC,YAAY,YACjCd,UAAU,sCAAsCe,SAAUhB,EAAMiB,kBCK7DC,G,MAVF,SAAClB,GACV,OAEI,yBAAKmB,MAAO,CAACC,SAAS,SAASC,OAAO,SAAUpB,UAAU,eACrDD,EAAMsB,YCgBJC,E,kDArBX,WAAYvB,GAAO,IAAD,8BACd,cAAMA,IACDwB,MAAM,CACPC,UAAS,GAHC,E,8DAQAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAOG,KAAKJ,MAAMC,SACb,oDACAG,KAAK5B,MAAMsB,a,GAhBIQ,aC+DbC,G,wDAlDb,aAAc,IAAD,8BACX,gBAgBFC,eAAe,SAACC,GACd,EAAKJ,SAAS,CACZK,YAAYD,EAAME,OAAOC,SAjB3B,EAAKZ,MAAM,CACTa,KAAK,GACLH,YAAY,IAJH,E,gEAUK,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKb,SAAS,CAACQ,KAAKK,S,+BAW5B,IAAD,EAEmBd,KAAKJ,MAAvBa,EAFD,EAECA,KAAKH,EAFN,EAEMA,YAENS,EAAaN,EAAKO,QAAO,SAAAlC,GAAG,OAAEA,EAAIE,SAASiC,oBAAoBC,SAASZ,EAAYW,wBAG5F,OAAQR,EAAKU,OAKT,yBAAK9C,UAAU,MACT,wBAAIA,UAAU,YAAd,iBACA,kBAAC,EAAD,CAAWgB,aAAcW,KAAKI,iBAE9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,KAAMmC,OAT1B,wBAAI1C,UAAU,WAAd,kB,GAnCc6B,cCDEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.4042bc2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons'\r\nimport './Card.css'\r\n\r\n\r\n\r\n//stateless functional component\r\nconst Card=(props)=>{\r\n    return (\r\n        <div className=\"myDim o-50 br-100 grow  bg-gold baskerville dib ma4 pa4 tc pointer bw2 shadow-5\">\r\n           \r\n            <img src={`https://robohash.org/mylkitty${props.id}/set_set4?size=100x100`} alt='kitty'/> \r\n            <h5>{props.name}</h5>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\n\r\n\r\nconst CardList=({CATS})=>{\r\n\r\n    const renderCards=CATS.map(cat=> <Card key={cat.id} id={cat.id} name={cat.username}  />);\r\n\r\n    return(\r\n    <div>\r\n        {renderCards}\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons'\r\nimport './Searchbox.css';\r\n\r\n\r\nconst Searchbox=(props)=>{\r\n    return(\r\n        <div >\r\n            <input type='search' placeholder='search...'\r\n            className='pa2 ma1 ba  bg-light-yellow b-gold ' onChange={props.searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport './Scroll.css'\r\n\r\n// a component which accept children (wrap a component)\r\nconst Scroll=(props)=>{\r\n    return (\r\n        //inline style accept style as js obj\r\n        <div style={{overflow:'scroll',height:'500px'}} className='pa4 wrapper'>  \r\n            {props.children}\r\n        </div>\r\n        \r\n        )\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        return this.state.hasError?\r\n             <h2>somthing went wrong!</h2> :\r\n             this.props.children\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React ,{Component} from 'react';\nimport CardList from '../components/CardList/CardList'\nimport Searchbox from '../components/Searchbox/Searchbox'\nimport Scroll from '../components/Scroll/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport 'tachyons'\nimport './App.css';\n\n// const CATS=[{id:1,name:'kitty',age:'12months'},{id:2,name:'looli',age:'2months'},\n// {id:3,name:'pury',age:'6months'},{id:4,name:'pussy',age:'10months'},{id:5,name:'kittys',age:'12months'},{id:6,name:'loolis',age:'2months'},\n// {id:7,name:'purys',age:'6months'},{id:8,name:'pussys',age:'10months'}];\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state={\n      cats:[],\n      searchfield:''\n\n    }\n  }\n\n  //its a react lifesycle methode so no need to bind 'this'  :https://reactjs.org/docs/react-component.html\ncomponentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=>this.setState({cats:users}))\n}\n\n  //use either arrow func or bind 'this' to method for not having problem with using 'this'\n  onSearchChange=(event)=>{\n    this.setState({\n      searchfield:event.target.value, //changing cats as state here slows down the app!!!!\n    });\n  }\n\n\nrender(){\n\n  const {cats,searchfield}=this.state;\n\n  const filteredCats=cats.filter(cat=>cat.username.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase()));\n\n//in case fetching takes time... (if else checking for length)\nreturn !cats.length?\n //if lenght===0\n    <h2 className='f1 gold'>loading...</h2>:  \n(\n  //else\n    <div className='tc'>                       \n          <h2 className=' f1 gold'>Kitty Gallery</h2>\n          <Searchbox searchChange={this.onSearchChange}/>\n\n          <Scroll>\n            <ErrorBoundary>\n              <CardList CATS={filteredCats}/>\n            </ErrorBoundary>\n          </Scroll>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}